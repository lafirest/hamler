module Test.Network.TCP where

import Prelude (IO, Unit, bind, discard, pure, spawn, unit, ($), (==), (>>=))
import Network.TCP ( listen, ListenOption(..), accept, connect
                    , send, recv, close, Option(..), TcpOption(..))
import Test.QuickCheck (TestGroup(..), TestResult, quickCheck1)
import Network.Inet (IpAddress(..), Family(..), Backend(..))
import Data.Timeout (Timeout(..))


echoSvr :: Integer -> IO ()
echoSvr port = do
  listenSock <- listen port [ TcpOption $ Option $ Active false
                            , TcpOption $ Family $ Inet
                            , TcpOption $ Option $ Backend SocketBackend
                            , Backlog 100 ]
  sock <- accept listenSock
  recvLoop listenSock sock
 where
   recvLoop lisSock sock = do
     packet <- recv sock 100
     case packet of
       "close" -> do
          close sock
          close lisSock
       otherwise -> do
          send sock packet
     recvLoop lisSock sock

start :: IO ()
start = do
  spawn $ echoSvr 8000
  pure ()

client :: IO Boolean
client = do
  sock <- connect (Ip4Address (127, 0, 0, 1)) 8000
                  [ Option $ Active false
                  , Option $ Keepalive true
                  , Option $ SendTimeout $ Timeout 5000]
  send sock "hello"
  recvPacket <- recv sock 100
  send sock "close"
  close sock
  pure $ recvPacket == "hello"

test :: TestGroup (Integer -> IO TestResult)
test = Exe [ quickCheck1 "TCP: simple echo server" (start >>= \_ -> client)
           ]
